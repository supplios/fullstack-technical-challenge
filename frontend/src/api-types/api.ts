/* tslint:disable */
/* eslint-disable */
/**
 * supplios API Documentation
 * API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CarEntity
 */
export interface CarEntity {
    /**
     * The unique identifier of the car
     * @type {number}
     * @memberof CarEntity
     */
    'id': number;
    /**
     * The price of the car
     * @type {number}
     * @memberof CarEntity
     */
    'price': number;
    /**
     * The brand of the car
     * @type {string}
     * @memberof CarEntity
     */
    'brand': string;
    /**
     * The model of the car
     * @type {string}
     * @memberof CarEntity
     */
    'model': string;
    /**
     * The manufacturing year of the car
     * @type {number}
     * @memberof CarEntity
     */
    'year': number;
    /**
     * The title status of the car
     * @type {string}
     * @memberof CarEntity
     */
    'title_status': string;
    /**
     * The mileage of the car
     * @type {number}
     * @memberof CarEntity
     */
    'mileage': number;
    /**
     * The color of the car
     * @type {string}
     * @memberof CarEntity
     */
    'color': string;
    /**
     * The VIN (Vehicle Identification Number) of the car
     * @type {string}
     * @memberof CarEntity
     */
    'vin': string;
    /**
     * The lot number of the car
     * @type {number}
     * @memberof CarEntity
     */
    'lot': number;
    /**
     * The state where the car is located
     * @type {string}
     * @memberof CarEntity
     */
    'state': string;
    /**
     * The country where the car is located
     * @type {string}
     * @memberof CarEntity
     */
    'country': string;
    /**
     * The condition of the car
     * @type {string}
     * @memberof CarEntity
     */
    'condition': string;
}
/**
 * 
 * @export
 * @interface CarFiltersOptionsDto
 */
export interface CarFiltersOptionsDto {
    /**
     * 
     * @type {Array<number>}
     * @memberof CarFiltersOptionsDto
     */
    'prices': Array<number>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CarFiltersOptionsDto
     */
    'colors': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CarFiltersOptionsDto
     */
    'brands': Array<string>;
}
/**
 * 
 * @export
 * @interface CarGroupedByLocationDto
 */
export interface CarGroupedByLocationDto {
    /**
     * The state where the car is located
     * @type {string}
     * @memberof CarGroupedByLocationDto
     */
    'state': string;
    /**
     * The country where the car is located
     * @type {string}
     * @memberof CarGroupedByLocationDto
     */
    'country': string;
    /**
     * Array of car IDs
     * @type {Array<number>}
     * @memberof CarGroupedByLocationDto
     */
    'ids': Array<number>;
    /**
     * Count of cars in the each group
     * @type {number}
     * @memberof CarGroupedByLocationDto
     */
    'count': number;
}
/**
 * 
 * @export
 * @interface CarGroupedByLocationResult
 */
export interface CarGroupedByLocationResult {
    /**
     * Array of cars grouped by location
     * @type {Array<CarGroupedByLocationDto>}
     * @memberof CarGroupedByLocationResult
     */
    'data': Array<CarGroupedByLocationDto>;
    /**
     * Total number of items
     * @type {number}
     * @memberof CarGroupedByLocationResult
     */
    'total': number;
    /**
     * Total number of pages
     * @type {number}
     * @memberof CarGroupedByLocationResult
     */
    'totalPages': number;
    /**
     * Current page number
     * @type {number}
     * @memberof CarGroupedByLocationResult
     */
    'page': number;
    /**
     * Number of items per page
     * @type {number}
     * @memberof CarGroupedByLocationResult
     */
    'perPage': number;
}
/**
 * 
 * @export
 * @interface CarPaginationResult
 */
export interface CarPaginationResult {
    /**
     * Array of car entities
     * @type {Array<CarEntity>}
     * @memberof CarPaginationResult
     */
    'data': Array<CarEntity>;
    /**
     * Total number of items
     * @type {number}
     * @memberof CarPaginationResult
     */
    'total': number;
    /**
     * Total number of pages
     * @type {number}
     * @memberof CarPaginationResult
     */
    'totalPages': number;
    /**
     * Current page number
     * @type {number}
     * @memberof CarPaginationResult
     */
    'page': number;
    /**
     * Number of items per page
     * @type {number}
     * @memberof CarPaginationResult
     */
    'perPage': number;
}
/**
 * 
 * @export
 * @interface CreateCarDto
 */
export interface CreateCarDto {
    /**
     * The price of the car
     * @type {number}
     * @memberof CreateCarDto
     */
    'price': number;
    /**
     * The brand of the car
     * @type {string}
     * @memberof CreateCarDto
     */
    'brand': string;
    /**
     * The model of the car
     * @type {string}
     * @memberof CreateCarDto
     */
    'model': string;
    /**
     * The manufacturing year of the car
     * @type {number}
     * @memberof CreateCarDto
     */
    'year': number;
    /**
     * The title status of the car
     * @type {string}
     * @memberof CreateCarDto
     */
    'title_status': string;
    /**
     * The mileage of the car
     * @type {number}
     * @memberof CreateCarDto
     */
    'mileage': number;
    /**
     * The color of the car
     * @type {string}
     * @memberof CreateCarDto
     */
    'color': string;
    /**
     * The VIN (Vehicle Identification Number) of the car
     * @type {string}
     * @memberof CreateCarDto
     */
    'vin': string;
    /**
     * The lot number of the car
     * @type {number}
     * @memberof CreateCarDto
     */
    'lot': number;
    /**
     * The state where the car is located
     * @type {string}
     * @memberof CreateCarDto
     */
    'state': string;
    /**
     * The country where the car is located
     * @type {string}
     * @memberof CreateCarDto
     */
    'country': string;
    /**
     * The condition of the car
     * @type {string}
     * @memberof CreateCarDto
     */
    'condition': string;
}

/**
 * CarsApi - axios parameter creator
 * @export
 */
export const CarsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateCarDto} createCarDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCar: async (createCarDto: CreateCarDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCarDto' is not null or undefined
            assertParamExists('createCar', 'createCarDto', createCarDto)
            const localVarPath = `/api/cars`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCarDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [priceFrom] The minimum price of the car for the filter range
         * @param {number} [priceTo] The maximum price of the car for the filter range
         * @param {Array<string>} [colors] Filter by multiple car colors, pass each color as a separate query parameter, like &#x60;colors&#x3D;red&amp;colors&#x3D;blue&#x60;
         * @param {Array<string>} [brands] Filter by multiple car brands, pass each brand as a separate query parameter, like &#x60;brands&#x3D;toyota&amp;brands&#x3D;ford&#x60;
         * @param {number} [perPage] Number of results in each page or request
         * @param {number} [page] Number of the page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCars: async (priceFrom?: number, priceTo?: number, colors?: Array<string>, brands?: Array<string>, perPage?: number, page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/cars`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (priceFrom !== undefined) {
                localVarQueryParameter['priceFrom'] = priceFrom;
            }

            if (priceTo !== undefined) {
                localVarQueryParameter['priceTo'] = priceTo;
            }

            if (colors) {
                localVarQueryParameter['colors'] = colors;
            }

            if (brands) {
                localVarQueryParameter['brands'] = brands;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [perPage] Number of results in each page or request
         * @param {number} [page] Number of the page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCarsGroupedByLocation: async (perPage?: number, page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/cars/group/location`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {boolean} [isPrice] 
         * @param {boolean} [isColor] 
         * @param {boolean} [isBrand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCarsFilters: async (isPrice?: boolean, isColor?: boolean, isBrand?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/cars/filters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (isPrice !== undefined) {
                localVarQueryParameter['isPrice'] = isPrice;
            }

            if (isColor !== undefined) {
                localVarQueryParameter['isColor'] = isColor;
            }

            if (isBrand !== undefined) {
                localVarQueryParameter['isBrand'] = isBrand;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CarsApi - functional programming interface
 * @export
 */
export const CarsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CarsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateCarDto} createCarDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCar(createCarDto: CreateCarDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CarEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCar(createCarDto, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CarsApi.createCar']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} [priceFrom] The minimum price of the car for the filter range
         * @param {number} [priceTo] The maximum price of the car for the filter range
         * @param {Array<string>} [colors] Filter by multiple car colors, pass each color as a separate query parameter, like &#x60;colors&#x3D;red&amp;colors&#x3D;blue&#x60;
         * @param {Array<string>} [brands] Filter by multiple car brands, pass each brand as a separate query parameter, like &#x60;brands&#x3D;toyota&amp;brands&#x3D;ford&#x60;
         * @param {number} [perPage] Number of results in each page or request
         * @param {number} [page] Number of the page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findCars(priceFrom?: number, priceTo?: number, colors?: Array<string>, brands?: Array<string>, perPage?: number, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CarPaginationResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findCars(priceFrom, priceTo, colors, brands, perPage, page, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CarsApi.findCars']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} [perPage] Number of results in each page or request
         * @param {number} [page] Number of the page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findCarsGroupedByLocation(perPage?: number, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CarGroupedByLocationResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findCarsGroupedByLocation(perPage, page, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CarsApi.findCarsGroupedByLocation']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {boolean} [isPrice] 
         * @param {boolean} [isColor] 
         * @param {boolean} [isBrand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCarsFilters(isPrice?: boolean, isColor?: boolean, isBrand?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CarFiltersOptionsDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCarsFilters(isPrice, isColor, isBrand, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CarsApi.getCarsFilters']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * CarsApi - factory interface
 * @export
 */
export const CarsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CarsApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateCarDto} createCarDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCar(createCarDto: CreateCarDto, options?: any): AxiosPromise<CarEntity> {
            return localVarFp.createCar(createCarDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [priceFrom] The minimum price of the car for the filter range
         * @param {number} [priceTo] The maximum price of the car for the filter range
         * @param {Array<string>} [colors] Filter by multiple car colors, pass each color as a separate query parameter, like &#x60;colors&#x3D;red&amp;colors&#x3D;blue&#x60;
         * @param {Array<string>} [brands] Filter by multiple car brands, pass each brand as a separate query parameter, like &#x60;brands&#x3D;toyota&amp;brands&#x3D;ford&#x60;
         * @param {number} [perPage] Number of results in each page or request
         * @param {number} [page] Number of the page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCars(priceFrom?: number, priceTo?: number, colors?: Array<string>, brands?: Array<string>, perPage?: number, page?: number, options?: any): AxiosPromise<CarPaginationResult> {
            return localVarFp.findCars(priceFrom, priceTo, colors, brands, perPage, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [perPage] Number of results in each page or request
         * @param {number} [page] Number of the page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCarsGroupedByLocation(perPage?: number, page?: number, options?: any): AxiosPromise<CarGroupedByLocationResult> {
            return localVarFp.findCarsGroupedByLocation(perPage, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {boolean} [isPrice] 
         * @param {boolean} [isColor] 
         * @param {boolean} [isBrand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCarsFilters(isPrice?: boolean, isColor?: boolean, isBrand?: boolean, options?: any): AxiosPromise<Array<CarFiltersOptionsDto>> {
            return localVarFp.getCarsFilters(isPrice, isColor, isBrand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CarsApi - object-oriented interface
 * @export
 * @class CarsApi
 * @extends {BaseAPI}
 */
export class CarsApi extends BaseAPI {
    /**
     * 
     * @param {CreateCarDto} createCarDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarsApi
     */
    public createCar(createCarDto: CreateCarDto, options?: RawAxiosRequestConfig) {
        return CarsApiFp(this.configuration).createCar(createCarDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [priceFrom] The minimum price of the car for the filter range
     * @param {number} [priceTo] The maximum price of the car for the filter range
     * @param {Array<string>} [colors] Filter by multiple car colors, pass each color as a separate query parameter, like &#x60;colors&#x3D;red&amp;colors&#x3D;blue&#x60;
     * @param {Array<string>} [brands] Filter by multiple car brands, pass each brand as a separate query parameter, like &#x60;brands&#x3D;toyota&amp;brands&#x3D;ford&#x60;
     * @param {number} [perPage] Number of results in each page or request
     * @param {number} [page] Number of the page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarsApi
     */
    public findCars(priceFrom?: number, priceTo?: number, colors?: Array<string>, brands?: Array<string>, perPage?: number, page?: number, options?: RawAxiosRequestConfig) {
        return CarsApiFp(this.configuration).findCars(priceFrom, priceTo, colors, brands, perPage, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [perPage] Number of results in each page or request
     * @param {number} [page] Number of the page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarsApi
     */
    public findCarsGroupedByLocation(perPage?: number, page?: number, options?: RawAxiosRequestConfig) {
        return CarsApiFp(this.configuration).findCarsGroupedByLocation(perPage, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {boolean} [isPrice] 
     * @param {boolean} [isColor] 
     * @param {boolean} [isBrand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarsApi
     */
    public getCarsFilters(isPrice?: boolean, isColor?: boolean, isBrand?: boolean, options?: RawAxiosRequestConfig) {
        return CarsApiFp(this.configuration).getCarsFilters(isPrice, isColor, isBrand, options).then((request) => request(this.axios, this.basePath));
    }
}



